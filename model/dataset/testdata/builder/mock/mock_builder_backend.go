// Code generated by MockGen. DO NOT EDIT.
// Source: ./model/dataset/builder.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/piprate/metalocker/model"
	dataset "github.com/piprate/metalocker/model/dataset"
)

// MockLeaseBuilderBackend is a mock of LeaseBuilderBackend interface.
type MockLeaseBuilderBackend struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseBuilderBackendMockRecorder
}

// MockLeaseBuilderBackendMockRecorder is the mock recorder for MockLeaseBuilderBackend.
type MockLeaseBuilderBackendMockRecorder struct {
	mock *MockLeaseBuilderBackend
}

// NewMockLeaseBuilderBackend creates a new mock instance.
func NewMockLeaseBuilderBackend(ctrl *gomock.Controller) *MockLeaseBuilderBackend {
	mock := &MockLeaseBuilderBackend{ctrl: ctrl}
	mock.recorder = &MockLeaseBuilderBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseBuilderBackend) EXPECT() *MockLeaseBuilderBackendMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockLeaseBuilderBackend) Load(ctx context.Context, id string, opts ...dataset.LoadOption) (model.DataSet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Load", varargs...)
	ret0, _ := ret[0].(model.DataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockLeaseBuilderBackendMockRecorder) Load(ctx, id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLeaseBuilderBackend)(nil).Load), varargs...)
}

// Submit mocks base method.
func (m *MockLeaseBuilderBackend) Submit(ctx context.Context, lease *model.Lease, cleartext bool, lockerID string, sender *model.LockerParticipant, headName ...string) dataset.RecordFuture {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, lease, cleartext, lockerID, sender}
	for _, a := range headName {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Submit", varargs...)
	ret0, _ := ret[0].(dataset.RecordFuture)
	return ret0
}

// Submit indicates an expected call of Submit.
func (mr *MockLeaseBuilderBackendMockRecorder) Submit(ctx, lease, cleartext, lockerID, sender interface{}, headName ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, lease, cleartext, lockerID, sender}, headName...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockLeaseBuilderBackend)(nil).Submit), varargs...)
}
